Microsoft (R) Macro Assembler Version 14.10.25019.0	    08/02/20 22:08:35
test.asm						     Page 1 - 1


				;Test.asm


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 00000000 00000000		team1 dword ?
 00000004 00000000		team2 dword ?
 00000008 00000000		temp dword ?
 0000000C 00000000		t1 dword ?
 00000010 00000000		t2 dword ? 
 00000014 00000000		overs dword ?
 00000018 00000000		runs dword ?
 0000001C 00000000		runs1 dword ?
 00000020 00000000		o dword ?
 00000024 00000000		balls dword ?
 00000028 00000000		target dword ?
 0000002C 57 69 6E 20 54	win1 byte "Win Team 1",0
	   65 61 6D 20 31
	   00
 00000037 57 69 6E 20 54	win2 byte "Win Team 2",0
	   65 61 6D 20 32
	   00
 00000042 53 74 61 72 74	newover byte "Start new over",0
	   20 6E 65 77 20
	   6F 76 65 72 00

 00000051 65 6E 74 65 72	m1 byte "enter overs ",0
	   20 6F 76 65 72
	   73 20 00
 0000005E 45 6E 74 65 72	m2 byte "Enter score ",0
	   20 73 63 6F 72
	   65 20 00
 0000006B 20 2D 2D 2D 2D	m3 byte " -----> No Run  ",0
	   2D 3E 20 4E 6F
	   20 52 75 6E 20
	   20 00
 0000007C 52 75 6E 73 20	m4 byte "Runs ",0
	   00
 00000082 4F 76 65 72 73	m5 byte "Overs ",0
	   20 00
 00000089 4F 75 74 20 00	m6 byte "Out ",0
 0000008E 54 45 41 4D 20	m7 byte "TEAM 2 ",0
	   32 20 00
 00000096 2D 2D 2D 2D 2D	lint byte "----------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 00
 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	call clrscr

 00000005  BA 00000051 R	mov edx,offset m1
 0000000A  E8 00000000 E	call writestring
 0000000F  E8 00000000 E	call readint 

 00000014  A3 00000014 R	mov overs,eax
 00000019  C7 05 00000018 R	mov runs,0
	   00000000
 00000023  B9 00000001		mov ecx,1
 00000028  C7 05 00000020 R	mov o,0
	   00000000

				.while ecx<=overs
 00000032  E9 000000D0	   *	    jmp    @C0001
 00000037		   *@C0002:

 00000037  C7 05 00000024 R	mov balls,1
	   00000001
				.while balls<=6
 00000041  E9 0000009F	   *	    jmp    @C0003
 00000046		   *@C0004:
 00000046  E8 00000000 E	call crlf
 0000004B  BA 0000005E R	mov edx,offset m2
 00000050  E8 00000000 E	call writestring
 00000055  B8 00000000		mov eax,0
 0000005A  E8 00000000 E	call readchar
 0000005F  E8 00000000 E	call writechar

				.if(al=='w')
 00000064  3C 77	   *	    cmp    al, 'w'
 00000066  75 0E	   *	    jne    @C0005
 00000068  FF 05 00000018 R	inc runs
 0000006E  FF 0D 00000024 R	dec balls
				.elseif(al=='o')
 00000074  EB 64	   *	    jmp    @C0007
 00000076		   *@C0005:
 00000076  3C 6F	   *	    cmp    al, 'o'
 00000078  75 08	   *	    jne    @C0008
 0000007A  FF 05 00000020 R	inc o
				.elseif(al=='1')
 00000080  EB 58	   *	    jmp    @C000A
 00000082		   *@C0008:
 00000082  3C 31	   *	    cmp    al, '1'
 00000084  75 09	   *	    jne    @C000B
 00000086  83 05 00000018 R	add runs,1
	   01
				.elseif(al=='2')
 0000008D  EB 4B	   *	    jmp    @C000D
 0000008F		   *@C000B:
 0000008F  3C 32	   *	    cmp    al, '2'
 00000091  75 09	   *	    jne    @C000E
 00000093  83 05 00000018 R	add runs,2
	   02
				.elseif(al=='3')
 0000009A  EB 3E	   *	    jmp    @C0010
 0000009C		   *@C000E:
 0000009C  3C 33	   *	    cmp    al, '3'
 0000009E  75 09	   *	    jne    @C0011
 000000A0  83 05 00000018 R	add runs,3
	   03
				.elseif(al=='4')
 000000A7  EB 31	   *	    jmp    @C0013
 000000A9		   *@C0011:
 000000A9  3C 34	   *	    cmp    al, '4'
 000000AB  75 09	   *	    jne    @C0014
 000000AD  83 05 00000018 R	add runs,4
	   04
				.elseif(al=='5')
 000000B4  EB 24	   *	    jmp    @C0016
 000000B6		   *@C0014:
 000000B6  3C 35	   *	    cmp    al, '5'
 000000B8  75 09	   *	    jne    @C0017
 000000BA  83 05 00000018 R	add runs,5
	   05
				.elseif(al=='6')
 000000C1  EB 17	   *	    jmp    @C0019
 000000C3		   *@C0017:
 000000C3  3C 36	   *	    cmp    al, '6'
 000000C5  75 09	   *	    jne    @C001A
 000000C7  83 05 00000018 R	add runs,6
	   06

				.else
 000000CE  EB 0A	   *	    jmp    @C001C
 000000D0		   *@C001A:
 000000D0  BA 0000006B R	mov edx ,offset m3
 000000D5  E8 00000000 E	call writestring
				.endif

 000000DA		   *@C001C:
 000000DA		   *@C0019:
 000000DA		   *@C0016:
 000000DA		   *@C0013:
 000000DA		   *@C0010:
 000000DA		   *@C000D:
 000000DA		   *@C000A:
 000000DA		   *@C0007:
 000000DA  E8 00000000 E	call crlf
 000000DF  FF 05 00000024 R	inc balls 
				.endw
 000000E5		   *@C0003:
 000000E5  83 3D 00000024 R
	   06		   *	    cmp    balls, 006h
 000000EC  0F 86 FFFFFF54  *	    jbe    @C0004
 000000F2  E8 00000000 E	call crlf

 000000F7  BA 00000042 R	mov edx,offset newover
 000000FC  E8 00000000 E	call writestring
 00000101  E8 00000000 E	call crlf

 00000106  41			inc ecx

				.endw
 00000107		   *@C0001:
 00000107  3B 0D 00000014 R *	    cmp    ecx, overs
 0000010D  0F 86 FFFFFF24  *	    jbe    @C0002

 00000113  BA 0000007C R	mov edx,offset m4
 00000118  E8 00000000 E	call writestring
 0000011D  A1 00000018 R	mov eax,runs
 00000122  E8 00000000 E	call writeint
 00000127  E8 00000000 E	call crlf
 0000012C  BA 00000082 R	mov edx,offset m5
 00000131  E8 00000000 E	call writestring
 00000136  8B C1		mov eax,ecx
 00000138  E8 00000000 E	call writeint
 0000013D  E8 00000000 E	call crlf
 00000142  BA 00000089 R	mov edx,offset m6
 00000147  E8 00000000 E	call writestring
 0000014C  A1 00000020 R	mov eax,o
 00000151  E8 00000000 E	call writeint

 00000156  A1 00000018 R	mov eax,runs
 0000015B  8B 35 00000018 R	mov esi,runs
 00000161  A3 00000028 R	mov target,eax
 00000166  E8 00000000 E	call crlf
				;=======================
 0000016B  BA 00000096 R	mov edx,offset lint
 00000170  E8 00000000 E	call writestring
 00000175  E8 00000000 E	call crlf
 0000017A  BA 0000008E R	mov edx,offset m7
 0000017F  E8 00000000 E	call writestring
 00000184  E8 00000000 E	call crlf
 00000189  BA 00000096 R	mov edx,offset lint
 0000018E  E8 00000000 E	call writestring
 00000193  E8 00000000 E	call crlf

 00000198  C7 05 0000001C R	mov runs1,0
	   00000000
 000001A2  B9 00000001		mov ecx,1
 000001A7  C7 05 00000020 R	mov o,0
	   00000000

				.while ecx<=overs
 000001B1  E9 000000D0	   *	    jmp    @C001F
 000001B6		   *@C0020:

 000001B6  C7 05 00000024 R	mov balls,1
	   00000001
				.while balls<=6
 000001C0  E9 0000009F	   *	    jmp    @C0021
 000001C5		   *@C0022:
 000001C5  E8 00000000 E	call crlf
 000001CA  BA 0000005E R	mov edx,offset m2
 000001CF  E8 00000000 E	call writestring
 000001D4  B8 00000000		mov eax,0
 000001D9  E8 00000000 E	call readchar
 000001DE  E8 00000000 E	call writechar

				.if(al=='w')
 000001E3  3C 77	   *	    cmp    al, 'w'
 000001E5  75 0E	   *	    jne    @C0023
 000001E7  FF 05 0000001C R	inc runs1
 000001ED  FF 0D 00000024 R	dec balls
				.elseif(al=='o')
 000001F3  EB 64	   *	    jmp    @C0025
 000001F5		   *@C0023:
 000001F5  3C 6F	   *	    cmp    al, 'o'
 000001F7  75 08	   *	    jne    @C0026
 000001F9  FF 05 00000020 R	inc o
				.elseif(al=='1')
 000001FF  EB 58	   *	    jmp    @C0028
 00000201		   *@C0026:
 00000201  3C 31	   *	    cmp    al, '1'
 00000203  75 09	   *	    jne    @C0029
 00000205  83 05 0000001C R	add runs1,1
	   01
				.elseif(al=='2')
 0000020C  EB 4B	   *	    jmp    @C002B
 0000020E		   *@C0029:
 0000020E  3C 32	   *	    cmp    al, '2'
 00000210  75 09	   *	    jne    @C002C
 00000212  83 05 0000001C R	add runs1,2
	   02
				.elseif(al=='3')
 00000219  EB 3E	   *	    jmp    @C002E
 0000021B		   *@C002C:
 0000021B  3C 33	   *	    cmp    al, '3'
 0000021D  75 09	   *	    jne    @C002F
 0000021F  83 05 0000001C R	add runs1,3
	   03
				.elseif(al=='4')
 00000226  EB 31	   *	    jmp    @C0031
 00000228		   *@C002F:
 00000228  3C 34	   *	    cmp    al, '4'
 0000022A  75 09	   *	    jne    @C0032
 0000022C  83 05 0000001C R	add runs1,4
	   04
				.elseif(al=='5')
 00000233  EB 24	   *	    jmp    @C0034
 00000235		   *@C0032:
 00000235  3C 35	   *	    cmp    al, '5'
 00000237  75 09	   *	    jne    @C0035
 00000239  83 05 0000001C R	add runs1,5
	   05
				.elseif(al=='6')
 00000240  EB 17	   *	    jmp    @C0037
 00000242		   *@C0035:
 00000242  3C 36	   *	    cmp    al, '6'
 00000244  75 09	   *	    jne    @C0038
 00000246  83 05 0000001C R	add runs1,6
	   06

				.else
 0000024D  EB 0A	   *	    jmp    @C003A
 0000024F		   *@C0038:
 0000024F  BA 0000006B R	mov edx ,offset m3
 00000254  E8 00000000 E	call writestring
				.endif

 00000259		   *@C003A:
 00000259		   *@C0037:
 00000259		   *@C0034:
 00000259		   *@C0031:
 00000259		   *@C002E:
 00000259		   *@C002B:
 00000259		   *@C0028:
 00000259		   *@C0025:
 00000259  E8 00000000 E	call crlf
 0000025E  FF 05 00000024 R	inc balls 
				.endw
 00000264		   *@C0021:
 00000264  83 3D 00000024 R
	   06		   *	    cmp    balls, 006h
 0000026B  0F 86 FFFFFF54  *	    jbe    @C0022
 00000271  E8 00000000 E	call crlf

 00000276  BA 00000042 R	mov edx,offset newover
 0000027B  E8 00000000 E	call WriteString
 00000280  E8 00000000 E	call crlf


 00000285  41			inc ecx

				.endw
 00000286		   *@C001F:
 00000286  3B 0D 00000014 R *	    cmp    ecx, overs
 0000028C  0F 86 FFFFFF24  *	    jbe    @C0020
 00000292  BA 0000007C R	mov edx,offset m4
 00000297  E8 00000000 E	call writestring
 0000029C  A1 0000001C R	mov eax,runs1
 000002A1  E8 00000000 E	call writeint
 000002A6  E8 00000000 E	call crlf

 000002AB  BA 00000082 R	mov edx,offset m5
 000002B0  E8 00000000 E	call writestring
 000002B5  8B C1		mov eax,ecx
 000002B7  E8 00000000 E	call writeint
 000002BC  E8 00000000 E	call crlf
 000002C1  BA 00000089 R	mov edx,offset m6
 000002C6  E8 00000000 E	call writestring
 000002CB  A1 00000020 R	mov eax,o
 000002D0  E8 00000000 E	call writeint
 000002D5  E8 00000000 E	call crlf
				.if runs1 < esi
 000002DA  39 35 0000001C R *	    cmp    runs1, esi
 000002E0  73 11	   *	    jae    @C003D
 000002E2  BA 0000002C R	mov edx,offset win1
 000002E7  E8 00000000 E	call Writestring
 000002EC  E8 00000000 E	call crlf
				.else
 000002F1  EB 0F	   *	    jmp    @C003F
 000002F3		   *@C003D:
 000002F3  BA 00000037 R	mov edx,offset win2
 000002F8  E8 00000000 E	call Writestring
 000002FD  E8 00000000 E	call crlf
				.endif
 00000302		   *@C003F:

					exit
 00000302  6A 00	   *	    push   +000000000h
 00000304  E8 00000000 E   *	    call   ExitProcess
 00000309			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    08/02/20 22:08:35
test.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000A7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000309 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000309 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
balls  . . . . . . . . . . . . .	DWord	 00000024 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lint . . . . . . . . . . . . . .	Byte	 00000096 _DATA	
m1 . . . . . . . . . . . . . . .	Byte	 00000051 _DATA	
m2 . . . . . . . . . . . . . . .	Byte	 0000005E _DATA	
m3 . . . . . . . . . . . . . . .	Byte	 0000006B _DATA	
m4 . . . . . . . . . . . . . . .	Byte	 0000007C _DATA	
m5 . . . . . . . . . . . . . . .	Byte	 00000082 _DATA	
m6 . . . . . . . . . . . . . . .	Byte	 00000089 _DATA	
m7 . . . . . . . . . . . . . . .	Byte	 0000008E _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
newover  . . . . . . . . . . . .	Byte	 00000042 _DATA	
overs  . . . . . . . . . . . . .	DWord	 00000014 _DATA	
o  . . . . . . . . . . . . . . .	DWord	 00000020 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
runs1  . . . . . . . . . . . . .	DWord	 0000001C _DATA	
runs . . . . . . . . . . . . . .	DWord	 00000018 _DATA	
t1 . . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
t2 . . . . . . . . . . . . . . .	DWord	 00000010 _DATA	
target . . . . . . . . . . . . .	DWord	 00000028 _DATA	
team1  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
team2  . . . . . . . . . . . . .	DWord	 00000004 _DATA	
temp . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
win1 . . . . . . . . . . . . . .	Byte	 0000002C _DATA	
win2 . . . . . . . . . . . . . .	Byte	 00000037 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
